#!/usr/bin/env bash

SUPPORTED_PHP_VERSIONS=(5.6 7.0 7.1 7.2 7.3 7.4 8.0 8.1 8.2)
SKIP_BUILD=0

function print_help() {
  echo "Usage: $0 [-p PHP_VERSION] [-drh] [--] [COMMAND]"
  echo "  -p<PHP_VERSION>         The PHP version to use. Default: 8.0"
  echo "  -d                      Enable debug mode."
  echo "  -r                      Access container as root."
  echo "  -s                      Skip building images in build command."
  echo "  -h                      Display this help message."
  echo "Supported COMMANDs"
  echo "  build                 Build the images for the specified PHP version."
  echo "  clean                 Remove the containers and images, remove the wordpress installation."
  echo "  composer              Runs a Composer command in the specified PHP and Codeception version."
  echo "  composer_install      Install the Composer dependencies for the specified PHP and Codeception version."
  echo "  composer_update       Update the Composer dependencies for the specified PHP and Codeception version."
  echo "  config                Show the docker compose configuration for the specified PHP version."
  echo "  dc                    Execute a docker compose command fore the specified PHP version."
  echo "  clean_tmp             Remove the var/tmp directory."
  echo "  deep_clean            Like clean, additionally remove the /var directory."
  echo "  down                  Tears down the containers for the specified PHP version."
  echo "  exec                  Execute a command in a service for the specified PHP version."
  echo "  logs                  Show the logs of the containers for the specified PHP version."
  echo "  mysql                 Open a MySQL shell for the database service for the specified PHP version."
  echo "  phpcs                 Run PHP Code Sniffer on the src directory."
  echo "  phpcbf                Run PHP Code Beautifier on the src directory."
  echo "  phpstan               Run PHPStan for the specified PHP version."
  echo "  ps                    Show the status of the containers for the specified PHP version."
  echo "  run                   Run a specific Codeception test or suite for the specified PHP version."
  echo "  ssh                   SSH into a service for the specified PHP version."
  echo "  test                  Run all the tests for the specified PHP version."
  echo "  up                    Starts the containers for the specified PHP version."
  echo "  xdebug-off            Deactivates XDebug in the WordPress and Codeception service."
  echo "  xdebug-on             Activates XDebug in the WordPress and Codeception service."
}

while getopts "p:hdrs" opt; do
  case $opt in
  p)
    PHP_VERSION=$OPTARG
    ;;
  r)
    ROOT=1
    ;;
  d)
    set -x
    ;;
  h)
    print_help
    exit 0
    ;;
  s)
    SKIP_BUILD=1
    ;;
  \?)
    echo "Invalid option: -$OPTARG" >&2
    print_help
    exit 1
    ;;
  :)
    echo "Option -$OPTARG requires an argument." >&2
    print_help
    exit 1
    ;;
  esac
done

shift $((OPTIND - 1))

[ "${1:-}" = "--" ] && shift

PHP_VERSION=${PHP_VERSION:-5.6}

if [[ ! " ${SUPPORTED_PHP_VERSIONS[@]} " =~ " ${PHP_VERSION} " ]]; then
  echo "PHP version ${PHP_VERSION} is not supported."
  echo "Supported PHP versions: ${SUPPORTED_PHP_VERSIONS[@]}"
  exit 1
fi

TEST_DATABASES=(wordpress test_subdir test_subdomain test_empty)

export PHP_VERSION=${PHP_VERSION:-8.0}
export USER_UID=$(id -u)
export USER_GID=$(id -g)
export USER_NAME=$(id -un)
export PWD="$(pwd)"

# If the current architecture is arm64, use the arm64v8 images.
if [ "$(arch)" = "arm64" ]; then
  export DOCKER_CHROME_IMAGE="seleniarm/standalone-chromium:116.0-20230828"
else
  export DOCKER_CHROME_IMAGE="selenium/standalone-chrome:116.0-20230912"
fi

function ensure_twentytwenty_theme() {
  if [ -d "${PWD}/var/wordpress/wp-content/themes/twentytwenty" ]; then
    return
  fi

  # Download and install the twentytwenty theme.
  curl -sSL https://downloads.wordpress.org/theme/twentytwenty.2.1.zip -o "${PWD}/var/wordpress/wp-content/themes/twentytwenty.zip" || exit 1
  unzip -q "${PWD}/var/wordpress/wp-content/themes/twentytwenty.zip" -d "${PWD}/var/wordpress/wp-content/themes/" || exit 1
}

function ensure_twentytwentyone_theme() {
  if [ -d "${PWD}/var/wordpress/wp-content/themes/twentytwentyone" ]; then
    return
  fi

  # Download and install the twentytwentyone theme.
  curl -sSL https://downloads.wordpress.org/theme/twentytwentyone.2.1.zip -o "${PWD}/var/wordpress/wp-content/themes/twentytwentyone.zip" || exit 1
  unzip -q "${PWD}/var/wordpress/wp-content/themes/twentytwentyone.zip" -d "${PWD}/var/wordpress/wp-content/themes/" || exit 1
}

function ensure_test_databases() {
  # Create the test databases, use a for loop and exit on failure.
  for database in "${TEST_DATABASES[@]}"; do
    docker compose exec -T database mysql -uroot -ppassword -e "CREATE DATABASE IF NOT EXISTS ${database}" || exit 1
  done
}

function ensure_wordpress_scaffolded() {
  if [ -d "${PWD}/var/wordpress" ] && [ "${PHP_VERSION}" = "5.6" ] && [ "$(cat "${PWD}/var/wordpress/wp-includes/version.php" | grep "wp_version = '6.2")" ]; then
    rm -rf "${PWD}/var/wordpress"
  fi

  if [ ! -d "${PWD}/var/wordpress" ]; then
    mkdir -p "${PWD}/var/wordpress" || exit 1
  fi

  # If the PHP version is 5.6, then use the 6.2 WordPress version.
  if [ "${PHP_VERSION}" = "5.6" ]; then
    wp_version="wordpress-6.2"
  else
    wp_version="latest"
  fi

  if [ ! -f "${PWD}/var/wordpress-${wp_version}.tar.gz" ]; then
    if ! curl -s -o "${PWD}/var/wordpress-${wp_version}.tar.gz" https://wordpress.org/${wp_version}.tar.gz; then
      echo "Failed to download the ${wp_version} WordPress version."
      exit 1
    fi
  fi

  if [ ! -f "${PWD}/var/wordpress/wp-config-sample.php" ]; then
    if ! tar -xzf "${PWD}/var/wordpress-${wp_version}.tar.gz" -C "${PWD}/var/wordpress" --strip-components=1; then
      echo "Failed to unzip the ${wp_version} WordPress version."
      exit 1
    fi
  fi
}

function run_wp_cli_command() {
  docker run --rm -v "${PWD}/var/wordpress:/var/www/html" \
    --network "wpbrowser_php_${PHP_VERSION}" \
    -w /var/www/html \
    -u "${USER_UID}:${USER_GID}" \
    "lucatume/wp-browser-v3-build:php${PHP_VERSION}-apache" \
    wp --allow-root --url=http://wordpress.test --path=/var/www/html "$@"
}

function ensure_wordpress_updated() {
  if ! run_wp_cli_command core update-db; then
    exit 1
  fi
}

function ensure_wordpress_configured() {
  if [ -f "${PWD}/var/wordpress/wp-config.php" ]; then
    return
  fi

  # If the var/wordpress/wp-config.php file is not found, configure WordPress using wp-cli.
  # Configure WordPress using wp-cli.
  if ! docker run --rm -v "${PWD}/var/wordpress:/var/www/html" \
    --network "wpbrowser_php_${PHP_VERSION}" \
    -w /var/www/html \
    -u "${USER_UID}:${USER_GID}" \
    "lucatume/wp-browser-v3-build:php${PHP_VERSION}-apache" \
    bash -c "wp --allow-root core config --dbname=wordpress --dbuser=root --dbpass=password --dbhost=database --dbprefix=wp_ --extra-php <<PHP
define( 'WP_DEBUG', true );
define( 'WP_DEBUG_LOG', true );
define( 'WP_DEBUG_DISPLAY', false );
define( 'DISABLE_CRON', true );
PHP"; then
    echo "Failed to configure WordPress."
    exit 1
  fi
}

function ensure_wordpress_installed() {
  # If WordPress is already installed, then return. Use wp-cli to check if WordPress is installed.
  if run_wp_cli_command core is-installed; then
    return
  fi

  # The above check might have failed due to the site not being installed on this PHP version database.
  # If the installed.sql file exists, then import it.
  if [ -f "${PWD}/var/wordpress/installed.sql" ]; then
    run_wp_cli_command db import "/var/www/html/installed.sql" || exit 1
    return
  fi

  # Install WordPress using wp-cli.
  if ! run_wp_cli_command core install --url=http://wordpress.test --title="TEST" --admin_user=admin --admin_password=password --admin_email=admin@wordpress.test --skip-email; then
    echo "Failed to install WordPress."
    exit 1
  fi

  # Convert the site to multisite using wp-cli.
  if ! run_wp_cli_command core multisite-convert; then
    echo "Failed to convert the site to multisite."
    exit 1
  fi

  # Export the database to the installed.sql file to speed up future builds.
  run_wp_cli_command db export "/var/www/html/installed.sql" || exit 1
}

function ensure_test_plugins() {
  # Install the required test plugins.
  run_wp_cli_command plugin install akismet || exit 1
}

function ensure_externals_blocked() {
  run_wp_cli_command config set WP_HTTP_BLOCK_EXTERNAL true || exit 1
}

function ensure_externals_unblocked() {
  run_wp_cli_command config delete WP_HTTP_BLOCK_EXTERNAL
}

function build_images() {
  if [ "${PHP_VERSION}" = "5.6" ]; then
    export DOCKERFILE_SUFFIX="-PHP-5.6"
  fi

if [ "${PHP_VERSION}" = "5.6" ]; then
    export WP_IMAGE_VERSION="5"
  else
    export WP_IMAGE_VERSION="6"
  fi

  docker compose build --build-arg "WP_IMAGE_VERSION=${WP_IMAGE_VERSION}" --progress plain wordpress || exit 1
  docker compose build --build-arg "WP_IMAGE_VERSION=${WP_IMAGE_VERSION}" --progress plain codecept || exit 1
}

function build() {
  [ ! -d "${PWD}/var/cache/composer" ] && mkdir -p "${PWD}/var/cache/composer"
  docker compose pull --ignore-buildable || exit 1
  # Skip building the images if SKIP_BUILD is 1.
  if [ "${SKIP_BUILD}" = "0" ]; then
    build_images
  fi
  docker compose up -d --force-recreate --wait database || exit 1
  ensure_wordpress_scaffolded
  ensure_wordpress_configured
  ensure_wordpress_installed
  ensure_externals_unblocked
  ensure_wordpress_updated
  docker compose up -d --wait wordpress
  docker compose up -d --wait chrome
  docker compose up -d --wait codecept
  ensure_test_databases
  ensure_twentytwenty_theme
  ensure_twentytwentyone_theme
  ensure_test_plugins
  ensure_externals_blocked
}

function clean() {
  for version in "${SUPPORTED_PHP_VERSIONS[@]}"; do
    PHP_VERSION=$version docker compose down -v
    PHP_VERSION=$version docker compose rm -f
    docker rmi "lucatume/wp-browser-v3-build:php${version}-apache"
    docker rmi "lucatume/wp-browser-v3-build:php${version}-codeception"
  done

  rm -rf var/wordpress
}

function clean_tmp() {
  if [[ "$OSTYPE" == "darwin"* ]] && [ -f docker-compose.override.yml ] && [ -d /Volumes/WP-Browser-Ram-Disk/ ]; then
    rm -rf /Volumes/WP-Browser-Ram-Disk/*
  else
    rm -rf "$(pwd)/var/tmp"
  fi
}

function config() {
  docker compose config
}

function composer_run() {
  docker compose run --rm \
    -u "$(id -u):$(id -g)" \
    -w "$(pwd)" \
    --no-deps \
    --entrypoint=bash \
    codecept -c "composer $*" || exit 1
}

function composer_update() {
  rm -rf vendor composer.lock || exit 1

  composer_run update -W -n
}

function composer_install() {
  composer_run install --no-interaction --no-progress --no-suggest --no-scripts --no-autoloader || exit 1
}

function run_tests() {
  ensure_test_databases
  xdebug_off
  suites=$(find "${PWD}/tests" -name '*.suite.dist.yml' -print0 | xargs -0 -n1 basename | cut -d. -f1)
  for suite in $suites; do
    echo "Running tests for suite $suite ... "
    echo "=============================================================================="
    docker compose exec -u "$(id -u):$(id -g)" -w "$(pwd)" \
      codecept bash -c "php vendor/bin/codecept run $suite --ext DotReporter" || exit 1
  done
}

function xdebug_off() {
  docker compose exec -u "$(id -u):$(id -g)" -w "/var/www/html" wordpress bash xdebug-off || exit 1
  docker compose exec -u "$(id -u):$(id -g)" -w "$(pwd)" codecept bash xdebug-off || exit 1
}

function xdebug_on() {
  docker compose exec -u "$(id -u):$(id -g)" -w "/var/www/html" wordpress bash xdebug-on || exit 1
  docker compose exec -u "$(id -u):$(id -g)" -w "$(pwd)}" codecept bash xdebug-on || exit 1
}

COMMAND=${1:-help}

case $COMMAND in
build)
  build
  ;;
build_images)
  build_images
  ;;
clean)
  clean
  rm -f docker-compose.override.yml
  ;;
clean_tmp)
  clean_tmp
  ;;
composer)
  composer_run "${@:2}"
  ;;
composer_install)
  composer_install
  ;;
composer_update)
  composer_update
  ;;
config)
  config
  ;;
dc)
  shift
  docker compose "${@}"
  ;;
deep_clean)
  clean
  rm -rf var && mkdir -p var
  ;;
down)
  shift
  docker compose down "${@}"
  ;;
exec)
  service=${2:-codecept}
  docker compose exec -u "$(id -u):$(id -g)" -it -w "$(pwd)" "$service" "${@:2}"
  ;;
help)
  print_help
  ;;
logs)
  docker compose logs -f
  ;;
mysql)
  docker compose exec database mysql -u root -ppassword
  ;;
phpcs)
  docker compose exec -u "$(id -u):$(id -g)" -w "$(pwd)" codecept bash -c "composer run cs"
  ;;
phpcbf)
  docker compose exec -u "$(id -u):$(id -g)" -w "$(pwd)" codecept bash -c "composer run cs-fix"
  ;;
phpstan)
  docker compose exec -u "$(id -u):$(id -g)" -w "$(pwd)" codecept bash -c "composer run stan"
  ;;
ps)
  docker compose ps
  ;;
ssh)
  service=${2:-codecept}
  # If ROOT is set, set the user to "0:0", else set the user to the current user.
  if [ "${ROOT}" ]; then
    docker_user="0:0"
  else
    docker_user="$(id -u):$(id -g)"
  fi
  docker compose exec -u "${docker_user}" -it "$service" bash
  ;;
run)
  shift
  docker compose exec -u "$(id -u):$(id -g)" -w "$(pwd)" codecept php vendor/bin/codecept run $@
  ;;
test)
  run_tests
  ;;
up)
  shift
  docker compose up "${@}"
  ;;
xdebug-off)
  xdebug_off
  ;;
xdebug-on)
  xdebug_on
  ;;
*)
  echo "Unknown command: ${COMMAND}"
  print_help
  ;;
esac
